package templates

templ Utilities() {
	<p>
		There are a few helpful, general purpose utilities that have been added to Modmake over time. Some of them in an attempt to have some level of parity with more mature build systems.
	</p>
	<p>
		This is a subset of all functionality provided. For the full listing, see <a href="https://pkg.go.dev/github.com/saylorsolutions/modmake">the API docs</a>.
	</p>
	<ul>
		<li><a href="https://pkg.go.dev/github.com/saylorsolutions/modmake#F">Format strings</a> - Used to inject environment variable values into strings in one line. Allows providing defaults in case the environment variable is undefined.</li>
		<li><a href="https://pkg.go.dev/github.com/saylorsolutions/modmake#PathString">PathString</a> - Used to solve some of the cross-platform scripting incompatibilities. All paths in Modmake use forward slash (<code>/</code>) as a path separator, which is normalized upon use if needed.</li>
		<ul>
			<li>PathString can also be used to perform various filesystem operations.</li>
			<li>
				@DocLink("", "Path")
				- Used to create a new <code>PathString</code>
			</li>
			<li>
				@DocLink("PathString", "CopyTo")
				- Used to copy the file referenced by this <code>PathString</code> to another location.
			</li>
			<li>
				@DocLink("PathString", "Create")
				- Creates the file referenced by this <code>PathString</code>.
			</li>
			<li>
				@DocLink("PathString", "Dir")
				- Returns a <code>PathString</code> of the containing directory.
			</li>
			<li>
				@DocLink("PathString", "Exists")
				- Returns whether the <code>PathString</code> refers to a file that exists.
			</li>
			<li>And more...</li>
		</ul>
	</ul>
}

templ Utilities_TaskHelpers() {
	<p>Here are the most common Task helpers.</p>
	<ul>
		<li>
		@DocLink("", "Script")
		 - Script allows creating a Task that executes each Runner in sequence, returning the first error encountered.</li>
		<li>
			@DocLink("", "NoOp")
			 - Produces a Task that does nothing and returns a nil error. Most useful for testing purposes, or as a basis for extension with Then.</li>
		<li>
		@DocLink("", "WithoutErr")
		 - Takes a function that does not return an error and returns a Task. This is mostly for simplifying calling conventions.</li>
		<li>
		@DocLink("", "WithoutContext")
		 - Takes a function that does not listen to a context and returns a Task. This is mostly for simplifying calling conventions.</li>
		<li>
		@DocLink("", "Plain")
		 - Takes a simple function and returns a Task. This is mostly for simplifying calling conventions.</li>
		<li>
		@DocLink("", "Print")
		 - Returns a Task that prints a message and returns.</li>
		<li>
		@DocLink("", "Error")
		 - Returns a Task that returns an error.</li>
		<li>And more...</li>
	</ul>
}

templ Utilities_GoTools() {
	<p>Accessing the Go toolchain.</p>
	<ul>
		<li><a href="https://pkg.go.dev/github.com/saylorsolutions/modmake#GoTools">Go tools</a> - Using the <code>Go()</code> function provides programmatic access to the Go toolchain. This is used extensively in Modmake.</li>
		<ul>
			<li>These functions can be accessed by calling <code>Go()</code>, which enables accessing specific Go toolchain capabilities.</li>
			<li>
				@DocLink("GoTools", "Build")
				 - Used to compile Go binaries. It can also compile shared libraries and other formats.</li>
			<li>
				@DocLink("GoTools", "Run")
				 - Used to compile and run the code at a path in the module. The target path must reference a main package.</li>
			<li>
				@DocLink("GoTools", "TestAll")
				 - Runs all tests in the module.</li>
			<li>
				@DocLink("GoTools", "BenchmarkAll")
				 - Runs all benchmark tests. The default build model will leave the <code>benchmark</code> step disabled</li>
			<li>
				@DocLink("GoTools", "GenerateAll")
				 - Run all <code>{"//"}go:generate</code> commands in the module.</li>
			<li>
				@DocLink("GoTools", "Clean")
				 - This can be used to clean various caches kept by the Go toolchain.</li>
			<li>
				@DocLink("GoTools", "GetEnv")
				 - Allows querying for Go tools environment variable state.</li>
			<li>
				@DocLink("GoTools", "Command")
				 - For cases where the provided GoTools methods aren't sufficient, this is a good fallback because it allows more direct access to GoTools.</li>
		</ul>
		<li>There are also Go package management functions.</li>
		<ul>
			<li>
				@DocLink("GoTools", "Get")
				 - Gets a module and adds it to this modules dependencies.</li>
			<li>
				@DocLink("GoTools", "Install")
				 - Installs a Go module in <code>$GOPATH/bin</code>.</li>
			<li>
				@DocLink("GoTools", "ModTidy")
				 - Tidies the module's go.mod and go.sum.</li>
			<li>
				@DocLink("GoTools", "ModuleName")
				 - Returns the current module's name.</li>
			<li>
				@DocLink("GoTools", "ModuleRoot")
				 - Returns the absolute path to the root of the current module.</li>
			<li>
				@DocLink("GoTools", "ToModulePackage")
				 - Returns the relative package path to a path rooted relative to the module.</li>
			<li>
				@DocLink("GoTools", "ToModulePath")
				 - Works the opposite of <code>ToModulePackage</code>, converting a module package path to a regular path.</li>
		</ul>
		<li>And more...</li>
	</ul>
}

templ Utilities_Compression() {
	<p>Currently available compression helpers.</p>
	<ul>
		<li><a href="https://pkg.go.dev/github.com/saylorsolutions/modmake#TarArchive">TarArchive</a> - Provides a consistent interface to *.tar.gz compression.</li>
		<li><a href="https://pkg.go.dev/github.com/saylorsolutions/modmake#ZipArchive">ZipArchive</a> - Provides a consistent interface to *.zip compression.</li>
	</ul>
}

templ Utilities_Git() {
	<p>There are a few Git-related functions in <a href="https://pkg.go.dev/github.com/saylorsolutions/modmake@v0.3.1/pkg/git#pkg-index">pkg/git</a> that could help with version tagging builds and general automation.</p>
	<ul>
		<li>
			@PkgDocLink("/pkg/git", "", "Exec")
			- Executes a git command.
		</li>
		<li>
			@PkgDocLink("/pkg/git", "", "ExecOutput")
			- Executes a git command and returns its output.
		</li>
		<li>
			@PkgDocLink("/pkg/git", "", "BranchName")
			- Returns the currently checked out branch.
		</li>
		<li>
			@PkgDocLink("/pkg/git", "", "CommitHash")
			- Returns the currently checked commit hash.
		</li>
		<li>And more...</li>
	</ul>
}
